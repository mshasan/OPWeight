{
    "collab_server" : "",
    "contents" : "#' @title Probability of rank of test given effect size\n#'\n#' @description Comnpute the probability of rank of a\n#' test being higher than any other tests given the effect size from external\n#' information.\n#' @param k rank of a test\n#' @param et effect of the targeted test for importance sampling\n#' @param ey mean filter efffect from external information\n#' @param nrep number of replications for importance sampling\n#' @param m0 number of true null hypothesis\n#' @param m1 number of true alternative hypothesis\n#' @param monitor to observe the progress of the computation\n#'\n#' @details If one wants to test \\deqn{H_0: epsilon_i=0 vs. H_a: epsilon_i > 0,}\n#' then \\code{ey} should be mean of the filter effect sizes,\n#' This is called hypothesis testing for the continuous effect sizes.\\cr\n#'\n#' If one wants to test \\deqn{H_0: epsilon_i=0 vs. H_a: epsilon_i = epsilon,}\n#' then \\code{ey} should be median or any discrete value of the\n#' filter effect sizes. This is called hypothesis testing for the Binary\n#' effect sizes.\\cr\n#'\n#' If \\code{monitor = TRUE} then a window will open to see the progress of the\n#' computation. It is useful for a large number of tests\n#'\n#' \\code{m1} and \\code{m0} can be estimated using \\code{qvalue} from\n#' a bioconductor package \\code{qvalue}.\n#'\n#' @author Mohamad S. Hasan and Paul Schliekelman\n#' @export\n#' @import stats\n#' @seealso \\code{\\link{dnorm}} \\code{\\link{pnorm}} \\code{\\link{rnorm}}\n#' \\code{\\link{qvalue}}\n#' @return \\code{prob} probability of the rank of a test\n#' @examples\n#' # compute the probability of the rank of a test being third if all tests are\n#' # from the true null\n#' prob <- prob_rank_givenEffect(k = 3, et = 0, ey = 0, nrep = 10000,\n#'                                       m0 = 50, m1 = 50)\n#'\n#' # compute the probabilities of the ranks of a test being rank 1 to 100 if the\n#' # targeted test effect is 2 and the overall mean filter effect is 1.\n#' ranks <- 1:1000\n#' prob <- sapply(ranks, prob_rank_givenEffect, et = 2, ey = 1, nrep = 10000,\n#'                               m0 = 500, m1 = 500, monitor = FALSE)\n#'\n#' # plot\n#' plot(ranks,prob)\n#'\n#===============================================================================\n# function to compute p(rank=k|filterEffect=ey) by normal approximation\n\n# Input:-----\n# k rank of a test\n# et effect of the targeted test for importance sampling\n# ey mean filter efffect from external information\n# nrep = number of replications for importance sampling\n# m0 = number of true null hypothesis\n# m1 = number of true alternative hypothesis\n\n# internal parameters:-----\n# m = total number of tests\n# t = generate test statistics for target test with effect size et\n# p0 = prob of null test having higher test stat value than t\n# p1 = prob of alt test having higher test stat value than t\n# pb = monitor progress bar\n\n# output:-----\n# prob = p(rank=k|effect=ey)\n#===============================================================================\nprob_rank_givenEffect <- function(k, et, ey, nrep = 10000, m0, m1, monitor = FALSE)\n\t{\n        m = m0 + m1\n\t\tt <- rnorm(nrep, et, 1)\n\t\tp0 <- pnorm(-t)\n\t\tp1 <- pnorm(ey - t)\n\n\t\tmean0 <- (m0 - 1)*p0 + m1*p1 + 1\n\t\tmean1 <- m0*p0 + (m1 - 1)*p1 + 1\n\n\t\tvar0 <- (m0 - 1)*p0*(1 - p0) + m1*p1*(1 - p1)\n\t\tvar1 <- m0*p0*(1 - p0) + (m1 - 1)*p1*(1 - p1)\n\n\t\tprob <- ifelse(et == 0, mean(dnorm(k, mean0, sqrt(var0))),\n\t\t\t\t\t   mean(dnorm(k, mean1, sqrt(var1))))\n\n\t\tif(monitor != FALSE){\n    \t\tpb <- winProgressBar(title = \"ranks probability\", min = 0, max = m, width = 300)\n    \t    setWinProgressBar(pb, k, title = paste(round(k/m*100), \"% done\"))\n    \t\tclose(pb)\n\t\t}\n\n\t\treturn(prob)\n\t}\n\n\n\n\n\n\n",
    "created" : 1495486080781.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "53756811",
    "id" : "7CCA46AD",
    "lastKnownWriteTime" : 1495492012,
    "last_content_update" : 1495492012672,
    "path" : "C:/Users/mshasan/Google Drive/My R Packages/OPWeight/R/prob_rank_givenEffect.R",
    "project_path" : "R/prob_rank_givenEffect.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}