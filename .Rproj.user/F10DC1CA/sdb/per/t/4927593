{
    "collab_server" : "",
    "contents" : "#' @title Weight for the Binary effect sizes\n#'\n#' @description Compute weight from the probability of the rank given the effect size\n#' for the binary effect size\n#' @param alpha significance level of the hypotheis test\n#' @param et mean effect size of the test statistics\n#' @param m totoal number of hypothesis test\n#' @param m1 number of true alternative hypothesis\n#' @param tail right-tailed or two-tailed hypothesis test. default is right-tailed test\n#' @param delInterval interval between the \\code{delta} values of a sequence. Note that,\n#' \\code{delta} is a LaGrange multiplier, necessary to normalize the weight\n#' @param prob probability of the rank given the effect size\n#'\n#' @details\n#' If one wants to test \\deqn{H_0: epsilon_i=0 vs. H_a: epsilon_i = epsilon,}\n#' then \\code{et} and \\code{ey} should be median or any discrete value of the test\n#' and filter effect sizes, respectively. This is called hypothesis testing for\n#' the Binary effect sizes. \\code{m1} can be estimated using \\code{qvalue} from\n#' a bioconductor package \\code{qvalue}.\n#'\n#' @author Mohamad S. Hasan, mshasan@uga.edu\n#' @export\n#' @import OPWeight prob_rank_givenEffect\n#' @seealso \\code{\\link{prob_rank_givenEffect}} \\code{\\link{weight_continuous}}\n#' \\code{\\link{qvalue}}\n#' @return \\code{weight} normalized weight of the tests for the binary case\n#' @examples\n#'\n#' # compute the probabilities of the ranks of a test being rank 1 to 100 if the\n#' # targeted test effect is 2 and the overall mean filter effect is 1.\n#' ranks <- 1:100\n#' prob2 <- sapply(ranks, prob_rank_givenEffect, et = 2, ey = 1, nrep = 10000,\n#'                               m0 = 50, m1 = 50)\n#' # plot the prooabbility\n#' plot(ranks, prob2)\n#'\n#' # compute weight for the binary case\n#' weight_bin <- weight_binary(alpha = .05, et = 1, m = 100, m1 = 50, tail=1,\n#'                              delInterval = .0001, prob = prob2)\n#'\n#' # plot the weight\n#' plot(ranks, weight_bin)\n#'\n#===============================================================================\n# function to compute weight from p(rank=k|filterEffect=ey)\n\n# Input:-----\n# alpha = significance level of the hypotheis test\n# et = effect size from the actual data (test effect)\n# m = totoal number of hypothesis test\n# m1 = number of true alternative hypothesis\n# tail = one-tailed or two-tailed hypothesis test\n# delInterval =  interval between the delta values of a sequesnce\n# prob =probability of rank given the effect size\n\n# internal parameters:-----\n# delta = sequene of delta (lagrange multiplier) values\n# findDelta = function to compute sum of weight for each dleta\n# deltaOut = optimal delta value\n# sumWeight = sum of the weights\n# normWeight = normalized weight when necessary\n\n\n# output:-----\n# # Weight.out = weight without normalization\n#===============================================================================\n\n# function to compute weight binary case\n#--------------------------------------\nweight_binary <- function(alpha, et, m, m1, tail = 1L, delInterval = .0001, prob)\n{\n    prob <- prob/sum(prob, na.rm = T)\n    delta <- seq(0, 1, delInterval)\n    findDelta <- function(delta)\n    {\n        weight <- tail*(m/alpha)*pnorm(et/2 + 1/et*log(delta*m/(alpha*m1*prob)),\n                                       lower.tail = FALSE)\n        return(sum(weight, na.rm = TRUE))\n    }\n    weightSumVec <- vapply(delta, findDelta, 1)\n    deltaOut <- delta[min(abs(weightSumVec - m)) == abs(weightSumVec - m)]\n    deltaOut <- ifelse(length(deltaOut) > 1, .0001, deltaOut)\n    weight.out <- tail*(m/alpha)*pnorm(et/2 + 1/et*log(deltaOut*m/(alpha*m1*prob)),\n                                       lower.tail = FALSE)\n    sumWeight <- sum(weight.out, na.rm = TRUE)\n    normWeight <- if(sumWeight == 0) {rep(1, m)} else {weight.out/sumWeight*m}\n    return(normWeight)\n}\n\n\n",
    "created" : 1495490491218.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "3784101461",
    "id" : "4927593",
    "lastKnownWriteTime" : 1493843279,
    "last_content_update" : 1493843279,
    "path" : "C:/Users/mshasan/Google Drive/My R Packages/OPWeight/R/weight_binary.R",
    "project_path" : "R/weight_binary.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}