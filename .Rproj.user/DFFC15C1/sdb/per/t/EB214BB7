{
    "collab_server" : "",
    "contents" : "#' @title Probability of rank of test given effect size by simulations\n#'\n#' @description A simulation approach to comnpute the probability of rank of a\n#' test being higher than any other test given the effect size from the external\n#' information.\n#' @param s number of samples of test statistics composed of null and alternative\n#'  tests\n#' @param ey filter test efffect from the external information\n#' @param e.one one test effect that will vary across all tests\n#' @param m0 number of true null hypothesis\n#' @param m1 number of true alternative hypothesis\n#' @param effectType type of effect sizes, c(\"binary\",\"continuous\")\n#'\n#' @details If one wants to test \\deqn{H_0: epsilon_i=0 vs. H_a: epsilon_i > 0,}\n#' then \\code{ey} should be mean of the filter effect sizes,\n#' This is called hypothesis testing for the continuous effect sizes.\\cr\n#'\n#' If one wants to test \\deqn{H_0: epsilon_i=0 vs. H_a: epsilon_i = epsilon,}\n#' then \\code{ey} should be median or any discrete value of the\n#' filter effect sizes. This is called hypothesis testing for the Binary\n#' effect sizes.\\cr\n#'\n#' This is a simulation approach to compute the probability of the rank,\n#' P(rank | effect = ey) to verify the actual P(rank | effect = ey).\n#' Suppose, we have a vector of m = m1+m0 observations, where the first m1\n#' observations are\n#' from the true alternative and second m0 are from the true null models. If we\n#' pick two tests one from the first position and the other from the (m0+1)-th position,\n#' then we would expect that the first observation's rank is greater than m0,\n#' and (m1+1)-th observation's rank is less than or equal to m1.\n#' However, this is not always true, especially when the effect size of the test\n#' statistics is low, but the above scenerio become obvious as the the effect\n#' size increases. \\code{m1} and \\code{m0} can be estimated using \\code{qvalue} from\n#' a bioconductor package \\code{qvalue}.\n#'\n#' @author Mohamad S. Hasan and Paul Schliekelman\n#' @export\n#' @import stats\n#' @seealso \\code{\\link{runif}} \\code{\\link{rnorm}} \\code{\\link{qvalue}}\n#' @return \\code{r0} rank of the null test statistic\\cr\n#'         \\code{r1} rank of the alternative test statistic\n#' @examples\n#' # total number of sample generated (use sample size at least 1,000,000)\n#' sampleSize = 10000\n#' m0 = 50\n#' m1 = 50\n#' m = m0 +m1\n#'\n#' # compute rank of the tests\n#' rank <- sapply(1:sampleSize, prob_rank_givenEffect_simu, ey = 1, e.one = 1,\n#'                           m0 = m0, m1 = m1, effectType = \"continuous\")\n#'\n#' # rank may generate missing valuse because of the large effcet size,\n#' # therefore, to make a matplot one needs vector of equal size. This procedure\n#' # will replace the missing value to make the equal sized vectors\n#' # probability of the rank of a null test\n#' prob0 <- rep(NA, m)\n#' prob0_x <- tapply(rank[1,], rank[1,], length)/sampleSize\n#' prob0[as.numeric(names(prob0_x))] <- as.vector(prob0_x)\n#'\n#' # probability of the rank of an alternative test\n#' prob1 <- rep(NA, m)\n#' prob1_x <- tapply(rank[2,], rank[2,], length)/sampleSize\n#' prob1[as.numeric(names(prob1_x))] <- as.vector(prob1_x)\n#'\n#' # plot\n#' matplot(1:m, cbind(prob0, prob1), type = \"l\")\n#'\n#===============================================================================\n# function to compute p(rank=k|filterEffect=ey) by simulation\n# we used only uniform effects for continuous case.\n\n# Input:-----\n# s = number samples of test statistics composed of null and alternative tests\n# ey = filter test efffect from the external information\n# e.one one test effect that will vary across all tests\n# m0 = number of true null hypothesis\n# m1 = number of true alternative hypothesis\n# effectType = type of effect size c(\"binary\",\"continuous\")\n\n# internal parameters:-----\n# m = total number of test\n# ey0 = vector of effects of the null tests\n# ey1 = vector of effects of the alterantive tests\n# t01 = generate test statistics\n# r0 = rank of the null test statistic\n# r1 = rank of the alternative test statistic\n\n# output:-----\n# rank = pair of null and alternative test rank\n#===============================================================================\nprob_rank_givenEffect_simu <- function(s, ey, e.one, m0, m1,\n                                    effectType = c(\"binary\", \"continuous\"))\n    {\n        m = m0 + m1\n        ey0 <- rep(0, m0)\n\n        if(effectType == \"binary\"){ey1 <- rep(ey, m1)\n            } else {if(ey == 0){ey1 <- rep(0, m1)\n                } else {ey1 <- runif(m1, ey-1, ey)\n                    }\n                }\n        Ey <- c(ey1, ey0)\n        Ey[1] <- e.one\n        t01 <- rnorm(m, Ey, 1)\n        r1 <- rank(-t01)[1]\n        r0 <- rank(-t01)[m1+1]\n        cbind(r0, r1)\n    }\n\n\n",
    "created" : 1495113610728.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "3513211911",
    "id" : "EB214BB7",
    "lastKnownWriteTime" : 1493843398,
    "last_content_update" : 1493843398,
    "path" : "C:/Users/Apu-Jerrica/Google Drive/My R Packages/OPWeight/R/prob_rank_givenEffect_simu.R",
    "project_path" : "R/prob_rank_givenEffect_simu.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}