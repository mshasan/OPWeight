{
    "collab_server" : "",
    "contents" : "#' @title Weight for the continuous effect sizes\n#'\n#' @description Compute weight from the probability of the rank given the effect size\n#' for the continuous effect size\n#' @param alpha significance level of the hypothesis test\n#' @param et mean effect size of the test statistics\n#' @param m totoal number of hypothesis test\n#' @param tail right-tailed or two-tailed hypothesis test. default is right-tailed test\n#' @param delInterval interval between the \\code{delta} values of a sequence. Note that,\n#' \\code{delta} is a LaGrange multiplier, necessary to normalize the weight\n#' @param prob probability of the rank given the effect size\n#'\n#' @details\n#' If one wants to test \\deqn{H_0: epsilon_i = 0 vs. H_a: \\epsilon_i > 0,}\n#' then \\code{et} and \\code{ey} should be mean value of the test and filter\n#' effect sizes, respectively. This is called hypothesis testing for the continuous\n#' effect sizes.\n#'\n#' @author Mohamad S. Hasan and Paul Schliekelman\n#' @export\n#' @import OPWeight prob_rank_givenEffect\n#' @seealso \\code{\\link{prob_rank_givenEffect}} \\code{\\link{weight_binary}}\n#'\n#' @return \\code{weight} normalized weight of the tests for the continuous case\n#' @examples\n#'\n#' # compute the probabilities of the ranks of a test being rank 1 to 100 if the\n#' # targeted test effect is 2 and the overall mean filter effect is 1.\n#' ranks <- 1:100\n#' prob2 <- sapply(ranks, prob_rank_givenEffect, et = 2, ey = 1, nrep = 10000,\n#'                               m0 = 50, m1 = 50)\n#'\n#' # plot the prooabbility\n#' plot(ranks, prob2)\n#'\n#' # compute weight for the continuous case\n#' weight_cont <- weight_continuous(alpha = .05, et = 1, m = 100, tail = 1,\n#'                             delInterval = .0001, prob = prob2)\n#'\n#' # plot the weight\n#' plot(ranks, weight_cont)\n#'\n#===============================================================================\n# function to compute weight from p(rank=k|filterEffect=ey)\n\n# Input:-----\n# alpha = significance level of the hypotheis test\n# et = mean effect size of the test statistics\n# m = totoal number of hypothesis test\n# tail = one-tailed or two-tailed hypothesis test\n# delInterval =  interval between the delta values of a sequesnce\n# prob = probability of rank given the effect size\n\n# internal parameters:-----\n# delta = sequene of delta (lagrange multiplier) values\n# findDelta = function to compute sum of weight for each dleta\n# deltaOut = optimal delta value\n# sumWeight = sum of the weights\n# normWeight = normalized weight when necessary\n\n\n# output:-----\n# # Weight.out = weight without normalization\n#===============================================================================\n\n# function to compute weight continuous case\n#--------------------------------------\nweight_continuous <- function(alpha, et, m, tail = 1L, delInterval = .0001, prob)\n{\n    prob <- prob/sum(prob, na.rm = T)\n    delta <- seq(0, 1, delInterval)\n    findDelta <- function(delta)\n    {\n        weight <- tail*(m/alpha)*pnorm(et/2 + 1/et*log(delta/(alpha*prob)),\n                                       lower.tail=FALSE)\n        return(sum(weight, na.rm = TRUE))\n    }\n    weightSumVec <- vapply(delta, findDelta, 1)\n    deltaOut <- delta[min(abs(weightSumVec - m)) == abs(weightSumVec - m)]\n    deltaOut <- ifelse(length(deltaOut) > 1, .0001, deltaOut)\n    weight.out <- tail*(m/alpha)*pnorm(et/2 + 1/et*log(deltaOut/(alpha*prob)),\n                                       lower.tail=FALSE)\n    sumWeight <- sum(weight.out, na.rm = TRUE)\n    normWeight <- if(sumWeight == 0) {rep(1, m)} else {weight.out/sumWeight*m}\n    return(normWeight)\n}\n",
    "created" : 1495113621471.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "2031747514",
    "id" : "B75E4627",
    "lastKnownWriteTime" : 1493843742,
    "last_content_update" : 1493843742,
    "path" : "C:/Users/Apu-Jerrica/Google Drive/My R Packages/OPWeight/R/weight_continuous.R",
    "project_path" : "R/weight_continuous.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}